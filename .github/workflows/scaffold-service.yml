# Save this as: .github/workflows/scaffold-service.yml

name: Scaffold a new service

on:
  workflow_dispatch:
    inputs:
      service_name:
        required: true
        description: 'The name of the new service'
        type: string
      description:
        required: false
        description: 'Description of the service'
        type: string
        default: 'A new microservice'
      port_context:
        required: true
        description: 'Port context (includes run ID)'
        type: string

env:
  ORG_NAME: your-org-name  # Replace with your actual GitHub org/username

jobs:
  scaffold-service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Display inputs (for debugging)
        run: |
          echo "=== INPUTS ==="
          echo "Service Name: ${{ inputs.service_name }}"
          echo "Description: ${{ inputs.description }}"
          echo "Port Context: ${{ inputs.port_context }}"
          echo ""
          echo "=== GITHUB CONTEXT ==="
          echo "Triggered by: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          echo ""
          echo "=== PORT CONTEXT PARSING ==="
          if [ -n "${{ inputs.port_context }}" ]; then
            echo "Port context is not empty"
            echo "Raw port context: ${{ inputs.port_context }}"
            # Try to parse the JSON
            echo '${{ inputs.port_context }}' | jq . || echo "Failed to parse port_context as JSON"
          else
            echo "Port context is empty"
          fi

      - name: Parse Port context safely
        id: port_context
        run: |
          PORT_CONTEXT='${{ inputs.port_context }}'
          echo "Raw port_context: $PORT_CONTEXT"
          
          if [ -n "$PORT_CONTEXT" ] && [ "$PORT_CONTEXT" != "null" ]; then
            # Try to extract runId from the JSON
            RUN_ID=$(echo "$PORT_CONTEXT" | jq -r '.runId // empty' 2>/dev/null || echo "")
            if [ -n "$RUN_ID" ] && [ "$RUN_ID" != "null" ]; then
              echo "✅ Found runId: $RUN_ID"
              echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
              echo "has_run_id=true" >> $GITHUB_OUTPUT
            else
              echo "❌ No runId found in port_context"
              echo "has_run_id=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ port_context is empty or null"
            echo "has_run_id=false" >> $GITHUB_OUTPUT
          fi

      - name: Log start to Port
        if: ${{ steps.port_context.outputs.has_run_id == 'true' }}
        continue-on-error: true
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ steps.port_context.outputs.run_id }}
          logMessage: "🚀 Starting scaffolding of service: ${{ inputs.service_name }}"

      - name: Simulate service creation
        run: |
          echo "Creating service: ${{ inputs.service_name }}"
          echo "Description: ${{ inputs.description }}"
          # Add your actual scaffolding logic here
          sleep 5
          echo "✅ Service scaffolding completed!"

      - name: Log completion to Port
        if: ${{ steps.port_context.outputs.has_run_id == 'true' }}
        continue-on-error: true
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ steps.port_context.outputs.run_id }}
          logMessage: "✅ Successfully scaffolded service: ${{ inputs.service_name }}"
