# Save this as: .github/workflows/scaffold-service.yml

name: Scaffold a new service

on:
  workflow_dispatch:
    inputs:
      service_name:
        required: true
        description: 'The name of the new service'
        type: string
      description:
        required: false
        description: 'Description of the service'
        type: string
        default: 'A new microservice'
      port_run_id:
        required: false
        description: 'Port run ID for logging'
        type: string

env:
  ORG_NAME: your-org-name  # Replace with your actual GitHub org/username

jobs:
  scaffold-service:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Display inputs (for debugging)
        run: |
          echo "=== INPUTS ==="
          echo "Service Name: ${{ inputs.service_name }}"
          echo "Description: ${{ inputs.description }}"
          echo "Port Run ID: ${{ inputs.port_run_id }}"
          echo ""
          echo "=== GITHUB CONTEXT ==="
          echo "Triggered by: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event: ${{ github.event_name }}"
          echo ""
          echo "=== PORT RUN ID CHECK ==="
          if [ -n "${{ inputs.port_run_id }}" ]; then
            echo "✅ Port run ID is present: ${{ inputs.port_run_id }}"
          else
            echo "❌ Port run ID is missing"
          fi

      - name: Test Port connection (simple)
        if: ${{ inputs.port_run_id != '' }}
        continue-on-error: true
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ inputs.port_run_id }}
          logMessage: "🚀 Starting scaffolding of service: ${{ inputs.service_name }}"

      - name: Set up Java for OpenAPI generation
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate Spring Boot service from OpenAPI spec
        run: |
          SERVICE_NAME="${{ inputs.service_name }}"
          
          # Create directory for the new service
          mkdir -p "$SERVICE_NAME"
          cd "$SERVICE_NAME"
          
          # Download OpenAPI Generator CLI
          echo "📥 Downloading OpenAPI Generator..."
          wget https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.2.0/openapi-generator-cli-7.2.0.jar -O openapi-generator-cli.jar
          
          # Download your actual OpenAPI spec
          echo "📋 Fetching OpenAPI specification..."
          
          # Try to download from various locations
          if wget https://raw.githubusercontent.com/mjones3/event-management-platform-demo/main/api-specs/user-service.yaml -O api-spec.yaml 2>/dev/null; then
            echo "✅ Downloaded OpenAPI spec from api-specs directory"
          elif wget https://raw.githubusercontent.com/mjones3/event-management-platform-demo/main/openapi/user-service.yaml -O api-spec.yaml 2>/dev/null; then
            echo "✅ Downloaded OpenAPI spec from openapi directory"
          elif wget https://raw.githubusercontent.com/mjones3/event-management-platform-demo/main/docs/api/user-service.yaml -O api-spec.yaml 2>/dev/null; then
            echo "✅ Downloaded OpenAPI spec from docs directory"
          else
            echo "⚠️  Could not find existing OpenAPI spec, creating a template based on service name..."
            
            # Create a generic microservice spec based on the service name
            SERVICE_NAME_UPPER="$(echo ${SERVICE_NAME} | tr '[:lower:]' '[:upper:]' | tr '-' '_')"
            SERVICE_NAME_CAMEL="$(echo ${SERVICE_NAME} | sed 's/-\([a-z]\)/\U\1/g' | sed 's/^\([a-z]\)/\U\1/')"
            
            cat > api-spec.yaml << EOF
          openapi: 3.0.3
          info:
            title: ${SERVICE_NAME_CAMEL} Service API
            description: ${{ inputs.description }}
            version: 1.0.0
            contact:
              name: API Support
              email: support@eventplatform.com
          servers:
            - url: https://api.eventplatform.com/${SERVICE_NAME}/v1
              description: Production server
            - url: http://localhost:8080/api/v1
              description: Development server
          
          security:
            - BearerAuth: []
          
          paths:
            /health:
              get:
                summary: Health check endpoint
                description: Returns the health status of the service
                tags:
                  - Health
                security: []
                responses:
                  '200':
                    description: Service is healthy
                    content:
                      application/json:
                        schema:
                          \$ref: '#/components/schemas/HealthResponse'
            
            /${SERVICE_NAME}s:
              get:
                summary: List ${SERVICE_NAME}s with pagination
                description: Retrieve a paginated list of ${SERVICE_NAME}s with optional filtering
                tags:
                  - ${SERVICE_NAME_CAMEL}s
                parameters:
                  - name: page
                    in: query
                    description: Page number (0-based)
                    schema:
                      type: integer
                      minimum: 0
                      default: 0
                  - name: size
                    in: query
                    description: Page size
                    schema:
                      type: integer
                      minimum: 1
                      maximum: 100
                      default: 20
                  - name: search
                    in: query
                    description: Search term
                    schema:
                      type: string
                      minLength: 2
                responses:
                  '200':
                    description: Successfully retrieved ${SERVICE_NAME}s
                    content:
                      application/json:
                        schema:
                          \$ref: '#/components/schemas/Paged${SERVICE_NAME_CAMEL}Response'
                  '400':
                    \$ref: '#/components/responses/BadRequest'
                  '401':
                    \$ref: '#/components/responses/Unauthorized'
              post:
                summary: Create a new ${SERVICE_NAME}
                description: Create a new ${SERVICE_NAME} in the system
                tags:
                  - ${SERVICE_NAME_CAMEL}s
                requestBody:
                  required: true
                  content:
                    application/json:
                      schema:
                        \$ref: '#/components/schemas/Create${SERVICE_NAME_CAMEL}Request'
                responses:
                  '201':
                    description: ${SERVICE_NAME_CAMEL} created successfully
                    content:
                      application/json:
                        schema:
                          \$ref: '#/components/schemas/${SERVICE_NAME_CAMEL}Response'
                  '400':
                    \$ref: '#/components/responses/BadRequest'
                  '401':
                    \$ref: '#/components/responses/Unauthorized'
            
            /${SERVICE_NAME}s/{id}:
              get:
                summary: Get ${SERVICE_NAME} by ID
                description: Retrieve detailed information about a specific ${SERVICE_NAME}
                tags:
                  - ${SERVICE_NAME_CAMEL}s
                parameters:
                  - name: id
                    in: path
                    required: true
                    description: ${SERVICE_NAME_CAMEL} ID
                    schema:
                      type: string
                      format: uuid
                responses:
                  '200':
                    description: ${SERVICE_NAME_CAMEL} found
                    content:
                      application/json:
                        schema:
                          \$ref: '#/components/schemas/${SERVICE_NAME_CAMEL}Response'
                  '404':
                    \$ref: '#/components/responses/NotFound'
                  '401':
                    \$ref: '#/components/responses/Unauthorized'
              put:
                summary: Update ${SERVICE_NAME}
                description: Update ${SERVICE_NAME} information (full update)
                tags:
                  - ${SERVICE_NAME_CAMEL}s
                parameters:
                  - name: id
                    in: path
                    required: true
                    schema:
                      type: string
                      format: uuid
                requestBody:
                  required: true
                  content:
                    application/json:
                      schema:
                        \$ref: '#/components/schemas/Update${SERVICE_NAME_CAMEL}Request'
                responses:
                  '200':
                    description: ${SERVICE_NAME_CAMEL} updated successfully
                    content:
                      application/json:
                        schema:
                          \$ref: '#/components/schemas/${SERVICE_NAME_CAMEL}Response'
                  '400':
                    \$ref: '#/components/responses/BadRequest'
                  '404':
                    \$ref: '#/components/responses/NotFound'
              delete:
                summary: Delete ${SERVICE_NAME}
                description: Delete a ${SERVICE_NAME}
                tags:
                  - ${SERVICE_NAME_CAMEL}s
                parameters:
                  - name: id
                    in: path
                    required: true
                    schema:
                      type: string
                      format: uuid
                responses:
                  '204':
                    description: ${SERVICE_NAME_CAMEL} deleted successfully
                  '404':
                    \$ref: '#/components/responses/NotFound'
                  '401':
                    \$ref: '#/components/responses/Unauthorized'
          
          components:
            securitySchemes:
              BearerAuth:
                type: http
                scheme: bearer
                bearerFormat: JWT
            
            schemas:
              HealthResponse:
                type: object
                properties:
                  status:
                    type: string
                    example: "UP"
                  service:
                    type: string
                    example: "${SERVICE_NAME}"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "1.0.0"
                required:
                  - status
                  - service
                  - timestamp
              
              ${SERVICE_NAME_CAMEL}Response:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "550e8400-e29b-41d4-a716-446655440000"
                  name:
                    type: string
                    example: "Sample ${SERVICE_NAME_CAMEL}"
                  description:
                    type: string
                    example: "A sample ${SERVICE_NAME} description"
                  status:
                    type: string
                    enum: [ACTIVE, INACTIVE, PENDING]
                    example: "ACTIVE"
                  createdAt:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
                  updatedAt:
                    type: string
                    format: date-time
                    example: "2024-01-20T14:22:00Z"
                required:
                  - id
                  - name
                  - status
                  - createdAt
              
              Create${SERVICE_NAME_CAMEL}Request:
                type: object
                properties:
                  name:
                    type: string
                    minLength: 1
                    maxLength: 100
                    example: "New ${SERVICE_NAME_CAMEL}"
                  description:
                    type: string
                    maxLength: 500
                    example: "Description of the new ${SERVICE_NAME}"
                required:
                  - name
              
              Update${SERVICE_NAME_CAMEL}Request:
                type: object
                properties:
                  name:
                    type: string
                    minLength: 1
                    maxLength: 100
                  description:
                    type: string
                    maxLength: 500
                  status:
                    type: string
                    enum: [ACTIVE, INACTIVE, PENDING]
              
              Paged${SERVICE_NAME_CAMEL}Response:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      \$ref: '#/components/schemas/${SERVICE_NAME_CAMEL}Response'
                  totalElements:
                    type: integer
                    format: int64
                    example: 150
                  totalPages:
                    type: integer
                    example: 8
                  size:
                    type: integer
                    example: 20
                  number:
                    type: integer
                    example: 0
                  first:
                    type: boolean
                    example: true
                  last:
                    type: boolean
                    example: false
                required:
                  - content
                  - totalElements
                  - totalPages
                  - size
                  - number
                  - first
                  - last
              
              ErrorResponse:
                type: object
                properties:
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-20T15:30:45Z"
                  status:
                    type: integer
                    example: 400
                  error:
                    type: string
                    example: "Bad Request"
                  message:
                    type: string
                    example: "Validation failed"
                  path:
                    type: string
                    example: "/api/v1/${SERVICE_NAME}s"
                required:
                  - timestamp
                  - status
                  - error
                  - message
                  - path
            
            responses:
              BadRequest:
                description: Bad request - validation errors
                content:
                  application/json:
                    schema:
                      \$ref: '#/components/schemas/ErrorResponse'
              
              Unauthorized:
                description: Authentication required
                content:
                  application/json:
                    schema:
                      \$ref: '#/components/schemas/ErrorResponse'
              
              NotFound:
                description: Resource not found
                content:
                  application/json:
                    schema:
                      \$ref: '#/components/schemas/ErrorResponse'
          
          tags:
            - name: ${SERVICE_NAME_CAMEL}s
              description: ${SERVICE_NAME_CAMEL} management operations
            - name: Health
              description: Service health endpoints
          EOF
          fi
          
          echo "📄 Generated OpenAPI specification preview:"
          echo "$(head -15 api-spec.yaml)"
          echo "..."
          
          # Generate Spring Boot application
          echo "🔧 Generating Spring Boot service..."
          java -jar openapi-generator-cli.jar generate \
            -i api-spec.yaml \
            -g spring \
            -o . \
            --additional-properties=packageName=com.eventplatform.$(echo $SERVICE_NAME | tr '-' '.'),apiPackage=com.eventplatform.$(echo $SERVICE_NAME | tr '-' '.').controller,modelPackage=com.eventplatform.$(echo $SERVICE_NAME | tr '-' '.').model,configPackage=com.eventplatform.$(echo $SERVICE_NAME | tr '-' '.').config,basePackage=com.eventplatform.$(echo $SERVICE_NAME | tr '-' '.'),groupId=com.eventplatform,artifactId=$SERVICE_NAME,artifactVersion=1.0.0,java8=false,dateLibrary=java8,interfaceOnly=false,skipDefaultInterface=false,useTags=true,singleContentTypes=true,performBeanValidation=true,useBeanValidation=true,library=spring-boot,documentationProvider=springdoc,openApiNullable=false,hideGenerationTimestamp=true
          
          echo "✅ Spring Boot service generated from OpenAPI spec!"

      - name: Enhance generated service with microservice features
        run: |
          SERVICE_NAME="${{ inputs.service_name }}"
          cd "$SERVICE_NAME"
          
          # Create enhanced application.yml
          cat > src/main/resources/application.yml << EOF
          server:
            port: 8080
          
          spring:
            application:
              name: $SERVICE_NAME
            datasource:
              url: jdbc:postgresql://\${DB_HOST:localhost}:\${DB_PORT:5432}/\${DB_NAME:${SERVICE_NAME//-/_}_db}
              username: \${DB_USERNAME:postgres}
              password: \${DB_PASSWORD:password}
            jpa:
              hibernate:
                ddl-auto: \${JPA_DDL_AUTO:validate}
              show-sql: \${JPA_SHOW_SQL:false}
              properties:
                hibernate:
                  format_sql: true
            
          management:
            endpoints:
              web:
                exposure:
                  include: health,info,metrics,prometheus
            endpoint:
              health:
                show-details: always
          
          logging:
            level:
              com.eventplatform: \${LOG_LEVEL:INFO}
              org.springframework.web: \${WEB_LOG_LEVEL:WARN}
          
          springdoc:
            api-docs:
              path: /api-docs
            swagger-ui:
              path: /swagger-ui.html
          EOF
          
          # Create Dockerfile
          cat > Dockerfile << 'EOF'
          FROM openjdk:17-jdk-slim
          
          WORKDIR /app
          COPY target/*.jar app.jar
          EXPOSE 8080
          
          ENTRYPOINT ["java", "-jar", "app.jar"]
          EOF
          
          # Create docker-compose.yml
          cat > docker-compose.yml << EOF
          version: '3.8'
          services:
            ${SERVICE_NAME}:
              build: .
              ports:
                - "8080:8080"
              environment:
                - DB_HOST=postgres
                - DB_USERNAME=postgres
                - DB_PASSWORD=password
                - DB_NAME=${SERVICE_NAME//-/_}_db
              depends_on:
                - postgres
            
            postgres:
              image: postgres:15
              environment:
                - POSTGRES_DB=${SERVICE_NAME//-/_}_db
                - POSTGRES_USER=postgres
                - POSTGRES_PASSWORD=password
              ports:
                - "5432:5432"
              volumes:
                - postgres_data:/var/lib/postgresql/data
          
          volumes:
            postgres_data:
          EOF
          
          echo "✅ Enhanced service with microservice features!"

      - name: Create GitHub Repository and push generated code
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SERVICE_NAME="${{ inputs.service_name }}"
          
          # Create new repository
          gh repo create "${{ github.repository_owner }}/$SERVICE_NAME" \
            --description "${{ inputs.description }} - Generated from OpenAPI specification" \
            --public
          
          # Clone the empty repository
          git clone "https://github.com/${{ github.repository_owner }}/$SERVICE_NAME.git" temp-repo
          
          # Copy generated code to the cloned repo
          cp -r "$SERVICE_NAME"/* temp-repo/
          cd temp-repo
          
          # Create README
          cat > README.md << EOF
          # $SERVICE_NAME
          
          ${{ inputs.description }}
          
          Generated Spring Boot microservice from OpenAPI specification.
          
          ## Quick Start
          
          1. **Start with Docker Compose:**
             \`\`\`bash
             docker-compose up -d
             \`\`\`
          
          2. **Test the API:**
             \`\`\`bash
             curl http://localhost:8080/api/v1/health
             \`\`\`
          
          3. **View API Documentation:**
             \`\`\`
             http://localhost:8080/swagger-ui.html
             \`\`\`
          
          ## Generated by
          - **User:** ${{ github.actor }}
          - **Date:** $(date)
          - **Platform:** Event Management Platform
          EOF
          
          # Initial commit
          git add .
          git commit -m "🎉 Initial commit: OpenAPI-generated $SERVICE_NAME service"
          git push origin main
          
          echo "✅ Repository '$SERVICE_NAME' created!"
          echo "🌐 URL: https://github.com/${{ github.repository_owner }}/$SERVICE_NAME"

      - name: Simulate service creation
        run: |
          echo "Creating service: ${{ inputs.service_name }}"
          echo "Description: ${{ inputs.description }}"
          # Add your actual scaffolding logic here
          sleep 5
          echo "✅ Service scaffolding completed!"

      - name: Log completion to Port
        if: ${{ inputs.port_run_id != '' }}
        continue-on-error: true
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ inputs.port_run_id }}
          logMessage: "✅ Successfully scaffolded service: ${{ inputs.service_name }}"