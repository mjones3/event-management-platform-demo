openapi: 3.0.3
info:
  title: Registration & Analytics Service API
  description: |
    Comprehensive service for managing event registrations, payment processing, 
    attendance tracking, and real-time analytics with A/B testing capabilities.
    
    
    Features:
    - Complex registration workflows with custom form handling
    - Multi-tier ticketing system with dynamic pricing
    - Real-time analytics and time-series data
    - Payment processing integration
    - Attendance tracking with multiple check-in methods
    - A/B testing framework for event optimization
    - Advanced reporting and metrics aggregation
  version: 1.0.0
  contact:
    name: Event Platform Team
    email: api-support@eventplatform.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.eventplatform.com/registration/v1
    description: Production server
  - url: https://staging-api.eventplatform.com/registration/v1
    description: Staging server
  - url: http://localhost:8083/api/v1
    description: Local development server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # Registration Management
  /registrations:
    post:
      summary: Create a new event registration
      description: |
        Creates a new registration for a user to an event. Supports complex 
        registration workflows with custom fields and multi-tier ticketing.
      tags:
        - Registrations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRegistrationRequest'
            examples:
              simple_registration:
                summary: Simple free event registration
                value:
                  userId: "123e4567-e89b-12d3-a456-426614174000"
                  eventId: "507f1f77bcf86cd799439011"
                  selectedTicketTierIds: ["free-tier"]
                  registrationData:
                    dietaryRestrictions: "Vegetarian"
                    emergencyContact: "+1-555-0123"
              complex_registration:
                summary: Paid event with multiple tickets
                value:
                  userId: "123e4567-e89b-12d3-a456-426614174000"
                  eventId: "507f1f77bcf86cd799439011"
                  selectedTicketTierIds: ["early-bird", "workshop-addon"]
                  registrationData:
                    company: "Tech Corp"
                    jobTitle: "Software Engineer"
                    tshirtSize: "M"
                    sessions: ["keynote-1", "workshop-a"]
                  paymentMethod: "CREDIT_CARD"
      responses:
        '201':
          description: Registration created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Registration conflict (user already registered, tickets sold out)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'
        '422':
          $ref: '#/components/responses/ValidationError'

    get:
      summary: List registrations with advanced filtering
      description: |
        Retrieve registrations with complex filtering, sorting, and pagination.
        Supports querying by multiple criteria and date ranges.
      tags:
        - Registrations
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/SortParam'
        - name: eventId
          in: query
          description: Filter by event ID
          schema:
            type: string
        - name: userId
          in: query
          description: Filter by user ID
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          description: Filter by registration status
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RegistrationStatus'
        - name: registeredAfter
          in: query
          description: Filter registrations created after this date
          schema:
            type: string
            format: date-time
        - name: registeredBefore
          in: query
          description: Filter registrations created before this date
          schema:
            type: string
            format: date-time
        - name: paymentStatus
          in: query
          description: Filter by payment status
          schema:
            $ref: '#/components/schemas/PaymentStatus'
        - name: includeCheckIns
          in: query
          description: Include check-in records in response
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of registrations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationPage'

  /registrations/{registrationId}:
    get:
      summary: Get registration details
      tags:
        - Registrations
      parameters:
        - $ref: '#/components/parameters/RegistrationIdParam'
        - name: includeAnalytics
          in: query
          description: Include analytics data for this registration
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Registration details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationDetails'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Update registration
      description: |
        Update registration details. Supports partial updates and status transitions.
        Some fields may be immutable after certain status changes.
      tags:
        - Registrations
      parameters:
        - $ref: '#/components/parameters/RegistrationIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRegistrationRequest'
      responses:
        '200':
          description: Registration updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Invalid status transition or concurrent modification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictError'

    delete:
      summary: Cancel registration
      description: |
        Cancel a registration. This may trigger refund processing depending 
        on the event's cancellation policy.
      tags:
        - Registrations
      parameters:
        - $ref: '#/components/parameters/RegistrationIdParam'
        - name: reason
          in: query
          description: Cancellation reason
          schema:
            type: string
            maxLength: 500
      responses:
        '200':
          description: Registration cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancellationResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Cannot cancel registration (e.g., event already started)

  # Bulk Operations
  /registrations/bulk:
    post:
      summary: Bulk registration operations
      description: |
        Perform bulk operations on multiple registrations such as status updates,
        notifications, or check-ins.
      tags:
        - Registrations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkRegistrationRequest'
      responses:
        '200':
          description: Bulk operation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResult'
        '207':
          description: Multi-status response for partial success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkOperationResult'

  # Check-in Management
  /registrations/{registrationId}/checkins:
    post:
      summary: Record a check-in
      description: |
        Record attendee check-in using various methods (QR code, NFC, manual, etc.).
        Supports multiple check-ins for multi-day events.
      tags:
        - Check-ins
      parameters:
        - $ref: '#/components/parameters/RegistrationIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckInRequest'
      responses:
        '201':
          description: Check-in recorded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckInRecord'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Check-in conflict (already checked in, invalid status)

    get:
      summary: Get check-in history
      tags:
        - Check-ins
      parameters:
        - $ref: '#/components/parameters/RegistrationIdParam'
      responses:
        '200':
          description: Check-in history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CheckInRecord'

  # Payment Management
  /payments:
    get:
      summary: List payments with filtering
      tags:
        - Payments
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - name: eventId
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/PaymentStatus'
        - name: dateFrom
          in: query
          schema:
            type: string
            format: date-time
        - name: dateTo
          in: query
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: List of payments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentPage'

  /payments/{paymentId}/refund:
    post:
      summary: Process refund
      description: |
        Process a refund for a payment. May be partial or full refund.
      tags:
        - Payments
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '200':
          description: Refund processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundResult'
        '400':
          $ref: '#/components/responses/BadRequest'

  # Analytics Endpoints
  /analytics/events:
    post:
      summary: Track analytics event
      description: |
        Record an analytics event for tracking user behavior and conversion metrics.
        Supports custom properties and automatic A/B test attribution.
      tags:
        - Analytics
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyticsEventRequest'
      responses:
        '202':
          description: Analytics event accepted for processing
        '400':
          $ref: '#/components/responses/BadRequest'

  /analytics/events/{eventId}/metrics:
    get:
      summary: Get event analytics metrics
      description: |
        Retrieve comprehensive analytics metrics for an event including
        registration funnel, conversion rates, and revenue data.
      tags:
        - Analytics
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
        - name: dateFrom
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: dateTo
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: granularity
          in: query
          description: Time granularity for metrics
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
        - name: metrics
          in: query
          description: Specific metrics to include
          schema:
            type: array
            items:
              type: string
              enum: [views, registrations, conversions, revenue, demographics]
      responses:
        '200':
          description: Event analytics metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAnalyticsResponse'

  /analytics/realtime/{eventId}:
    get:
      summary: Get real-time analytics
      description: |
        Get real-time analytics data for an ongoing event including
        current check-ins, session attendance, and live metrics.
      tags:
        - Analytics
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Real-time analytics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RealTimeAnalytics'

  # A/B Testing
  /experiments:
    get:
      summary: List active experiments
      tags:
        - Experiments
      parameters:
        - name: eventId
          in: query
          schema:
            type: string
        - name: active
          in: query
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: List of experiments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Experiment'

    post:
      summary: Create new experiment
      tags:
        - Experiments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExperimentRequest'
      responses:
        '201':
          description: Experiment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'

  /experiments/{experimentId}/participate:
    post:
      summary: Record experiment participation
      tags:
        - Experiments
      parameters:
        - name: experimentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperimentParticipationRequest'
      responses:
        '200':
          description: Participation recorded, variant assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentParticipationResponse'

  /experiments/{experimentId}/convert:
    post:
      summary: Record experiment conversion
      tags:
        - Experiments
      parameters:
        - name: experimentId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConversionRequest'
      responses:
        '200':
          description: Conversion recorded successfully

  # Reporting
  /reports/registration-summary:
    get:
      summary: Generate registration summary report
      tags:
        - Reports
      parameters:
        - name: eventId
          in: query
          required: true
          schema:
            type: string
        - name: format
          in: query
          schema:
            type: string
            enum: [json, csv, pdf]
            default: json
        - name: includeDetails
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Registration summary report
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationSummaryReport'
            text/csv:
              schema:
                type: string
            application/pdf:
              schema:
                type: string
                format: binary

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number (0-based)
      schema:
        type: integer
        minimum: 0
        default: 0
    SizeParam:
      name: size
      in: query
      description: Page size
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    SortParam:
      name: sort
      in: query
      description: Sort criteria (field,direction)
      schema:
        type: array
        items:
          type: string
          pattern: '^[a-zA-Z][a-zA-Z0-9]*,(asc|desc)$'
    RegistrationIdParam:
      name: registrationId
      in: path
      required: true
      schema:
        type: string
        format: uuid

  schemas:
    # Core Registration Schemas
    Registration:
      type: object
      required:
        - id
        - userId
        - eventId
        - status
        - registeredAt
        - totalAmount
        - currency
      properties:
        id:
          type: string
          format: uuid
          description: Unique registration identifier
        userId:
          type: string
          format: uuid
          description: Reference to user from User Management Service
        eventId:
          type: string
          description: Reference to event from Event Management Service
        status:
          $ref: '#/components/schemas/RegistrationStatus'
        paymentInfo:
          $ref: '#/components/schemas/PaymentInfo'
        registeredAt:
          type: string
          format: date-time
        registrationData:
          type: object
          additionalProperties: true
          description: Custom form responses and additional data
        selectedTicketTierIds:
          type: array
          items:
            type: string
        totalAmount:
          type: number
          format: double
          minimum: 0
          example: 99.99
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          example: 'USD'
        checkIns:
          type: array
          items:
            $ref: '#/components/schemas/CheckInRecord'
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/NotificationRecord'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        version:
          type: integer
          description: Version for optimistic locking

    RegistrationStatus:
      type: string
      enum:
        - PENDING
        - CONFIRMED
        - CHECKED_IN
        - CANCELLED
        - REFUNDED
      description: Current status of the registration

    CreateRegistrationRequest:
      type: object
      required:
        - userId
        - eventId
        - selectedTicketTierIds
      properties:
        userId:
          type: string
          format: uuid
        eventId:
          type: string
        selectedTicketTierIds:
          type: array
          items:
            type: string
          minItems: 1
        registrationData:
          type: object
          additionalProperties: true
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        promoCode:
          type: string
        referralSource:
          type: string

    UpdateRegistrationRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/RegistrationStatus'
        registrationData:
          type: object
          additionalProperties: true
        selectedTicketTierIds:
          type: array
          items:
            type: string

    RegistrationDetails:
      allOf:
        - $ref: '#/components/schemas/Registration'
        - type: object
          properties:
            analyticsData:
              $ref: '#/components/schemas/RegistrationAnalytics'
            eventDetails:
              type: object
              description: Cached event information
            userDetails:
              type: object
              description: Cached user information

    # Payment Schemas
    PaymentInfo:
      type: object
      required:
        - paymentId
        - method
        - status
        - amount
        - currency
      properties:
        paymentId:
          type: string
        method:
          $ref: '#/components/schemas/PaymentMethod'
        status:
          $ref: '#/components/schemas/PaymentStatus'
        transactionId:
          type: string
        amount:
          type: number
          format: double
          example: 99.99
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
        processedAt:
          type: string
          format: date-time
        paymentMetadata:
          type: object
          additionalProperties: true

    PaymentMethod:
      type: string
      enum:
        - CREDIT_CARD
        - PAYPAL
        - BANK_TRANSFER
        - FREE
        - CRYPTO
        - VOUCHER

    PaymentStatus:
      type: string
      enum:
        - PENDING
        - PROCESSING
        - COMPLETED
        - FAILED
        - CANCELLED
        - REFUNDED
        - PARTIALLY_REFUNDED

    RefundRequest:
      type: object
      required:
        - amount
        - reason
      properties:
        amount:
          type: number
          format: double
          minimum: 0
          example: 50.00
        reason:
          type: string
          maxLength: 500
        refundMethod:
          type: string
          enum: [ORIGINAL_METHOD, STORE_CREDIT, MANUAL]
          default: ORIGINAL_METHOD

    RefundResult:
      type: object
      properties:
        refundId:
          type: string
        status:
          type: string
          enum: [PENDING, COMPLETED, FAILED]
        amount:
          type: number
          format: double
          example: 50.00
        processedAt:
          type: string
          format: date-time
        estimatedArrival:
          type: string
          format: date-time

    # Check-in Schemas
    CheckInRecord:
      type: object
      required:
        - id
        - checkInTime
        - method
        - location
      properties:
        id:
          type: string
          format: uuid
        checkInTime:
          type: string
          format: date-time
        method:
          $ref: '#/components/schemas/CheckInMethod'
        location:
          type: string
        deviceId:
          type: string
        additionalData:
          type: object
          additionalProperties: true

    CheckInMethod:
      type: string
      enum:
        - QR_CODE
        - NFC
        - MANUAL
        - FACIAL_RECOGNITION
        - RFID
        - MOBILE_APP

    CheckInRequest:
      type: object
      required:
        - method
        - location
      properties:
        method:
          $ref: '#/components/schemas/CheckInMethod'
        location:
          type: string
        deviceId:
          type: string
        verificationData:
          type: object
          additionalProperties: true
          description: QR code data, NFC tag info, etc.
        additionalData:
          type: object
          additionalProperties: true

    # Analytics Schemas
    AnalyticsEventRequest:
      type: object
      required:
        - eventType
        - timestamp
      properties:
        eventId:
          type: string
        eventType:
          $ref: '#/components/schemas/AnalyticsEventType'
        timestamp:
          type: string
          format: date-time
        userId:
          type: string
          format: uuid
        sessionId:
          type: string
        properties:
          type: object
          additionalProperties: true
        userAgent:
          type: string
        ipAddress:
          type: string
          format: ipv4
        location:
          $ref: '#/components/schemas/GeoPoint'

    AnalyticsEventType:
      type: string
      enum:
        - PAGE_VIEW
        - REGISTRATION_START
        - REGISTRATION_COMPLETE
        - CHECK_IN
        - SESSION_ATTENDANCE
        - FEEDBACK_SUBMITTED
        - PAYMENT_INITIATED
        - PAYMENT_COMPLETED
        - EMAIL_OPENED
        - EMAIL_CLICKED

    EventAnalyticsResponse:
      type: object
      properties:
        eventId:
          type: string
        period:
          $ref: '#/components/schemas/DatePeriod'
        metrics:
          $ref: '#/components/schemas/EventMetrics'
        timeSeries:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesDataPoint'
        demographics:
          $ref: '#/components/schemas/DemographicsData'
        conversionFunnel:
          $ref: '#/components/schemas/ConversionFunnel'

    EventMetrics:
      type: object
      properties:
        totalViews:
          type: integer
        uniqueVisitors:
          type: integer
        registrationStarted:
          type: integer
        registrationCompleted:
          type: integer
        conversionRate:
          type: number
          format: double
          example: 0.25
        totalRevenue:
          type: number
          format: double
          example: 15000.00
        averageOrderValue:
          type: number
          format: double
          example: 125.50
        trafficSources:
          type: object
          additionalProperties:
            type: integer
        customMetrics:
          type: object
          additionalProperties: true

    RealTimeAnalytics:
      type: object
      properties:
        eventId:
          type: string
        timestamp:
          type: string
          format: date-time
        currentAttendees:
          type: integer
        totalCheckIns:
          type: integer
        liveMetrics:
          type: object
          properties:
            registrationsLastHour:
              type: integer
            checkInsLastHour:
              type: integer
            averageSessionDuration:
              type: number
              format: double
        sessionAttendance:
          type: array
          items:
            type: object
            properties:
              sessionId:
                type: string
              attendeeCount:
                type: integer
              capacity:
                type: integer

    # A/B Testing Schemas
    Experiment:
      type: object
      required:
        - id
        - name
        - variants
        - startDate
        - status
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        eventId:
          type: string
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ExperimentVariant'
        trafficAllocation:
          type: number
          format: double
          minimum: 0
          maximum: 1
          example: 0.8
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [DRAFT, ACTIVE, PAUSED, COMPLETED]
        targetingRules:
          type: object
          additionalProperties: true

    ExperimentVariant:
      type: object
      required:
        - id
        - name
        - weight
      properties:
        id:
          type: string
        name:
          type: string
        weight:
          type: number
          format: double
          minimum: 0
          maximum: 1
          example: 0.5
        configuration:
          type: object
          additionalProperties: true

    CreateExperimentRequest:
      type: object
      required:
        - name
        - variants
      properties:
        name:
          type: string
        description:
          type: string
        eventId:
          type: string
        variants:
          type: array
          items:
            $ref: '#/components/schemas/ExperimentVariant'
        trafficAllocation:
          type: number
          format: double
          default: 1.0
        targetingRules:
          type: object
          additionalProperties: true

    ExperimentParticipationRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          format: uuid
        userContext:
          type: object
          additionalProperties: true

    ExperimentParticipationResponse:
      type: object
      properties:
        participationId:
          type: string
          format: uuid
        variant:
          type: string
        configuration:
          type: object
          additionalProperties: true

    ConversionRequest:
      type: object
      required:
        - userId
        - conversionType
      properties:
        userId:
          type: string
          format: uuid
        conversionType:
          type: string
        conversionData:
          type: object
          additionalProperties: true

    # Bulk Operations
    BulkRegistrationRequest:
      type: object
      required:
        - operation
        - criteria
      properties:
        operation:
          type: string
          enum: [UPDATE_STATUS, SEND_NOTIFICATION, BULK_CHECK_IN, EXPORT]
        criteria:
          type: object
          properties:
            registrationIds:
              type: array
              items:
                type: string
                format: uuid
            eventId:
              type: string
            status:
              $ref: '#/components/schemas/RegistrationStatus'
            registeredAfter:
              type: string
              format: date-time
            registeredBefore:
              type: string
              format: date-time
        operationData:
          type: object
          additionalProperties: true
          description: Data specific to the operation being performed

    BulkOperationResult:
      type: object
      properties:
        operationId:
          type: string
          format: uuid
        totalItems:
          type: integer
        processedItems:
          type: integer
        successfulItems:
          type: integer
        failedItems:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              itemId:
                type: string
              error:
                type: string
              details:
                type: string
        status:
          type: string
          enum: [COMPLETED, PARTIAL_SUCCESS, FAILED]

    # Reporting Schemas
    RegistrationSummaryReport:
      type: object
      properties:
        eventId:
          type: string
        generatedAt:
          type: string
          format: date-time
        summary:
          type: object
          properties:
            totalRegistrations:
              type: integer
            confirmedRegistrations:
              type: integer
            checkedInAttendees:
              type: integer
            totalRevenue:
              type: number
              format: double
              example: 25000.00
            averageRegistrationValue:
              type: number
              format: double
              example: 125.50
        statusBreakdown:
          type: object
          additionalProperties:
            type: integer
        paymentMethodBreakdown:
          type: object
          additionalProperties:
            type: integer
        dailyRegistrations:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
              count:
                type: integer
              revenue:
                type: number
                format: double
                example: 1250.00
        registrations:
          type: array
          items:
            $ref: '#/components/schemas/Registration'
          description: Detailed registration list (only if includeDetails=true)

    # Pagination Schemas
    RegistrationPage:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/Registration'

    PaymentPage:
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: '#/components/schemas/PaymentInfo'

    PageResponse:
      type: object
      required:
        - content
        - pageable
        - totalElements
        - totalPages
        - last
        - first
        - numberOfElements
        - size
        - number
      properties:
        content:
          type: array
          items:
            type: object
        pageable:
          $ref: '#/components/schemas/Pageable'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        last:
          type: boolean
        first:
          type: boolean
        numberOfElements:
          type: integer
        size:
          type: integer
        number:
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        empty:
          type: boolean

    Pageable:
      type: object
      properties:
        page:
          type: integer
        size:
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'

    Sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean

    # Utility Schemas
    NotificationRecord:
      type: object
      required:
        - id
        - type
        - sentAt
        - status
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [EMAIL, SMS, PUSH, IN_APP]
        subject:
          type: string
        content:
          type: string
        sentAt:
          type: string
          format: date-time
        status:
          type: string
          enum: [PENDING, SENT, DELIVERED, FAILED, BOUNCED]
        metadata:
          type: object
          additionalProperties: true

    RegistrationAnalytics:
      type: object
      properties:
        registrationId:
          type: string
          format: uuid
        viewCount:
          type: integer
        lastViewedAt:
          type: string
          format: date-time
        referralSource:
          type: string
        deviceInfo:
          type: object
          properties:
            deviceType:
              type: string
              enum: [DESKTOP, MOBILE, TABLET]
            browser:
              type: string
            operatingSystem:
              type: string
        timeToRegister:
          type: integer
          description: Time from first view to registration in seconds
        experimentParticipations:
          type: array
          items:
            $ref: '#/components/schemas/ExperimentParticipation'

    ExperimentParticipation:
      type: object
      required:
        - id
        - userId
        - experimentId
        - variant
        - startedAt
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        experimentId:
          type: string
        variant:
          type: string
        startedAt:
          type: string
          format: date-time
        convertedAt:
          type: string
          format: date-time
        conversionData:
          type: object
          additionalProperties: true

    CancellationResult:
      type: object
      properties:
        registrationId:
          type: string
          format: uuid
        status:
          type: string
          enum: [CANCELLED, REFUND_PENDING, REFUND_PROCESSED]
        refundAmount:
          type: number
          format: double
          example: 99.99
        refundMethod:
          type: string
        estimatedRefundDate:
          type: string
          format: date
        cancellationFee:
          type: number
          format: double
          example: 5.00
        reason:
          type: string

    ConflictError:
      type: object
      properties:
        error:
          type: string
          enum: [ALREADY_REGISTERED, TICKETS_SOLD_OUT, INVALID_STATUS_TRANSITION, CONCURRENT_MODIFICATION]
        message:
          type: string
        details:
          type: object
          additionalProperties: true
        suggestedActions:
          type: array
          items:
            type: string

    DatePeriod:
      type: object
      required:
        - startDate
        - endDate
      properties:
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date

    TimeSeriesDataPoint:
      type: object
      required:
        - timestamp
        - value
      properties:
        timestamp:
          type: string
          format: date-time
        value:
          type: number
          format: double
        metadata:
          type: object
          additionalProperties: true

    DemographicsData:
      type: object
      properties:
        ageGroups:
          type: object
          additionalProperties:
            type: integer
        genderDistribution:
          type: object
          additionalProperties:
            type: integer
        locationDistribution:
          type: object
          additionalProperties:
            type: integer
        industryDistribution:
          type: object
          additionalProperties:
            type: integer
        registrationSources:
          type: object
          additionalProperties:
            type: integer

    ConversionFunnel:
      type: object
      properties:
        stages:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              count:
                type: integer
              conversionRate:
                type: number
                format: double
                example: 0.75
              dropOffRate:
                type: number
                format: double
                example: 0.25

    GeoPoint:
      type: object
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
          minimum: -90
          maximum: 90
          example: 40.7128
        longitude:
          type: number
          format: double
          minimum: -180
          maximum: 180
          example: -74.0060

    # Error Response Schemas
    ErrorResponse:
      type: object
      required:
        - error
        - message
        - timestamp
        - path
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: string
        timestamp:
          type: string
          format: date-time
        path:
          type: string
        traceId:
          type: string

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            fieldErrors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  rejectedValue:
                    type: string
                  message:
                    type: string

  responses:
    BadRequest:
      description: Invalid request parameters or body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    ValidationError:
      description: Validation failed for request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    TooManyRequests:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - type: object
                properties:
                  retryAfter:
                    type: integer
                    description: Seconds to wait before retrying

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'


# Tags for API organization
tags:
  - name: Registrations
    description: |
      Core registration management including creation, updates, and lifecycle management.
      Supports complex workflows with custom fields and multi-tier ticketing.
  - name: Check-ins
    description: |
      Attendance tracking with multiple check-in methods including QR codes, NFC, 
      manual entry, and facial recognition.
  - name: Payments
    description: |
      Payment processing, refunds, and financial transaction management with 
      support for multiple payment methods.
  - name: Analytics
    description: |
      Comprehensive analytics including real-time metrics, conversion tracking,
      and behavioral analytics with time-series data.
  - name: Experiments
    description: |
      A/B testing framework for optimizing conversion rates and user experience
      with statistical significance testing.
  - name: Reports
    description: |
      Advanced reporting capabilities with multiple output formats and 
      customizable data aggregations.

# External documentation links
externalDocs:
  description: Find more information about the Event Management Platform
  url: https://docs.eventplatform.com/registration-analytics-service