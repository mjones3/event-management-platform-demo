/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.eventplatform.registration.analytics.service.controller;

import com.eventplatform.registration.analytics.service.model.CheckInRecord;
import com.eventplatform.registration.analytics.service.model.CheckInRequest;
import com.eventplatform.registration.analytics.service.model.ErrorResponse;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Check-ins", description = "Attendance tracking with multiple check-in methods including QR codes, NFC,  manual entry, and facial recognition. ")
public interface CheckInsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /registrations/{registrationId}/checkins : Get check-in history
     *
     * @param registrationId  (required)
     * @return Check-in history (status code 200)
     */
    @Operation(
        operationId = "registrationsRegistrationIdCheckinsGet",
        summary = "Get check-in history",
        tags = { "Check-ins" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Check-in history", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CheckInRecord.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/registrations/{registrationId}/checkins",
        produces = "application/json"
    )
    
    default ResponseEntity<List<CheckInRecord>> registrationsRegistrationIdCheckinsGet(
        @Parameter(name = "registrationId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("registrationId") UUID registrationId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"checkInTime\" : \"2000-01-23T04:56:07.000+00:00\", \"location\" : \"location\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"additionalData\" : { \"key\" : \"\" }, \"deviceId\" : \"deviceId\" }, { \"checkInTime\" : \"2000-01-23T04:56:07.000+00:00\", \"location\" : \"location\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"additionalData\" : { \"key\" : \"\" }, \"deviceId\" : \"deviceId\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /registrations/{registrationId}/checkins : Record a check-in
     * Record attendee check-in using various methods (QR code, NFC, manual, etc.). Supports multiple check-ins for multi-day events. 
     *
     * @param registrationId  (required)
     * @param checkInRequest  (required)
     * @return Check-in recorded successfully (status code 201)
     *         or Invalid request parameters or body (status code 400)
     *         or Check-in conflict (already checked in, invalid status) (status code 409)
     */
    @Operation(
        operationId = "registrationsRegistrationIdCheckinsPost",
        summary = "Record a check-in",
        description = "Record attendee check-in using various methods (QR code, NFC, manual, etc.). Supports multiple check-ins for multi-day events. ",
        tags = { "Check-ins" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Check-in recorded successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CheckInRecord.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters or body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Check-in conflict (already checked in, invalid status)")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/registrations/{registrationId}/checkins",
        produces = "application/json",
        consumes = "application/json"
    )
    
    default ResponseEntity<CheckInRecord> registrationsRegistrationIdCheckinsPost(
        @Parameter(name = "registrationId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("registrationId") UUID registrationId,
        @Parameter(name = "CheckInRequest", description = "", required = true) @Valid @RequestBody CheckInRequest checkInRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"checkInTime\" : \"2000-01-23T04:56:07.000+00:00\", \"location\" : \"location\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"additionalData\" : { \"key\" : \"\" }, \"deviceId\" : \"deviceId\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
