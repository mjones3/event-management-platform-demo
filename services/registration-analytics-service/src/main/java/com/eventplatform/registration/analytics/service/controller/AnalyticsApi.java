/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.eventplatform.registration.analytics.service.controller;

import com.eventplatform.registration.analytics.service.model.AnalyticsEventRequest;
import org.springframework.format.annotation.DateTimeFormat;
import com.eventplatform.registration.analytics.service.model.ErrorResponse;
import com.eventplatform.registration.analytics.service.model.EventAnalyticsResponse;
import java.time.LocalDate;
import com.eventplatform.registration.analytics.service.model.RealTimeAnalytics;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Analytics", description = "Comprehensive analytics including real-time metrics, conversion tracking, and behavioral analytics with time-series data. ")
public interface AnalyticsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /analytics/events/{eventId}/metrics : Get event analytics metrics
     * Retrieve comprehensive analytics metrics for an event including registration funnel, conversion rates, and revenue data. 
     *
     * @param eventId  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param granularity Time granularity for metrics (optional, default to day)
     * @param metrics Specific metrics to include (optional)
     * @return Event analytics metrics (status code 200)
     */
    @Operation(
        operationId = "analyticsEventsEventIdMetricsGet",
        summary = "Get event analytics metrics",
        description = "Retrieve comprehensive analytics metrics for an event including registration funnel, conversion rates, and revenue data. ",
        tags = { "Analytics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Event analytics metrics", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EventAnalyticsResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/analytics/events/{eventId}/metrics",
        produces = "application/json"
    )
    
    default ResponseEntity<EventAnalyticsResponse> analyticsEventsEventIdMetricsGet(
        @Parameter(name = "eventId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("eventId") String eventId,
        @NotNull @Parameter(name = "dateFrom", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "dateFrom", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dateFrom,
        @NotNull @Parameter(name = "dateTo", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "dateTo", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate dateTo,
        @Parameter(name = "granularity", description = "Time granularity for metrics", in = ParameterIn.QUERY) @Valid @RequestParam(value = "granularity", required = false, defaultValue = "day") String granularity,
        @Parameter(name = "metrics", description = "Specific metrics to include", in = ParameterIn.QUERY) @Valid @RequestParam(value = "metrics", required = false) List<String> metrics
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"eventId\" : \"eventId\", \"timeSeries\" : [ { \"metadata\" : { \"key\" : \"\" }, \"value\" : 2.3021358869347655, \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"metadata\" : { \"key\" : \"\" }, \"value\" : 2.3021358869347655, \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\" } ], \"period\" : { \"endDate\" : \"2000-01-23\", \"startDate\" : \"2000-01-23\" }, \"metrics\" : { \"registrationCompleted\" : 5, \"averageOrderValue\" : 125.5, \"totalViews\" : 0, \"totalRevenue\" : 15000.0, \"registrationStarted\" : 1, \"conversionRate\" : 0.25, \"uniqueVisitors\" : 6, \"trafficSources\" : { \"key\" : 5 }, \"customMetrics\" : { \"key\" : \"\" } }, \"conversionFunnel\" : { \"stages\" : [ { \"name\" : \"name\", \"count\" : 7, \"dropOffRate\" : 0.25, \"conversionRate\" : 0.75 }, { \"name\" : \"name\", \"count\" : 7, \"dropOffRate\" : 0.25, \"conversionRate\" : 0.75 } ] }, \"demographics\" : { \"genderDistribution\" : { \"key\" : 9 }, \"locationDistribution\" : { \"key\" : 3 }, \"registrationSources\" : { \"key\" : 4 }, \"ageGroups\" : { \"key\" : 7 }, \"industryDistribution\" : { \"key\" : 2 } } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /analytics/events : Track analytics event
     * Record an analytics event for tracking user behavior and conversion metrics. Supports custom properties and automatic A/B test attribution. 
     *
     * @param analyticsEventRequest  (required)
     * @return Analytics event accepted for processing (status code 202)
     *         or Invalid request parameters or body (status code 400)
     */
    @Operation(
        operationId = "analyticsEventsPost",
        summary = "Track analytics event",
        description = "Record an analytics event for tracking user behavior and conversion metrics. Supports custom properties and automatic A/B test attribution. ",
        tags = { "Analytics" },
        responses = {
            @ApiResponse(responseCode = "202", description = "Analytics event accepted for processing"),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters or body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/analytics/events",
        produces = "application/json",
        consumes = "application/json"
    )
    
    default ResponseEntity<Void> analyticsEventsPost(
        @Parameter(name = "AnalyticsEventRequest", description = "", required = true) @Valid @RequestBody AnalyticsEventRequest analyticsEventRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /analytics/realtime/{eventId} : Get real-time analytics
     * Get real-time analytics data for an ongoing event including current check-ins, session attendance, and live metrics. 
     *
     * @param eventId  (required)
     * @return Real-time analytics data (status code 200)
     */
    @Operation(
        operationId = "analyticsRealtimeEventIdGet",
        summary = "Get real-time analytics",
        description = "Get real-time analytics data for an ongoing event including current check-ins, session attendance, and live metrics. ",
        tags = { "Analytics" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Real-time analytics data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RealTimeAnalytics.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/analytics/realtime/{eventId}",
        produces = "application/json"
    )
    
    default ResponseEntity<RealTimeAnalytics> analyticsRealtimeEventIdGet(
        @Parameter(name = "eventId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("eventId") String eventId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"eventId\" : \"eventId\", \"currentAttendees\" : 0, \"totalCheckIns\" : 6, \"liveMetrics\" : { \"checkInsLastHour\" : 5, \"averageSessionDuration\" : 5.637376656633329, \"registrationsLastHour\" : 1 }, \"timestamp\" : \"2000-01-23T04:56:07.000+00:00\", \"sessionAttendance\" : [ { \"attendeeCount\" : 2, \"sessionId\" : \"sessionId\", \"capacity\" : 7 }, { \"attendeeCount\" : 2, \"sessionId\" : \"sessionId\", \"capacity\" : 7 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
