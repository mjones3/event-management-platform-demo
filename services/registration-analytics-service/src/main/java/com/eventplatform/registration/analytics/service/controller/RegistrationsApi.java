/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.eventplatform.registration.analytics.service.controller;

import com.eventplatform.registration.analytics.service.model.BulkOperationResult;
import com.eventplatform.registration.analytics.service.model.BulkRegistrationRequest;
import com.eventplatform.registration.analytics.service.model.CancellationResult;
import com.eventplatform.registration.analytics.service.model.ConflictError;
import com.eventplatform.registration.analytics.service.model.CreateRegistrationRequest;
import org.springframework.format.annotation.DateTimeFormat;
import com.eventplatform.registration.analytics.service.model.ErrorResponse;
import java.time.OffsetDateTime;
import com.eventplatform.registration.analytics.service.model.PaymentStatus;
import com.eventplatform.registration.analytics.service.model.Registration;
import com.eventplatform.registration.analytics.service.model.RegistrationDetails;
import com.eventplatform.registration.analytics.service.model.RegistrationPage;
import com.eventplatform.registration.analytics.service.model.RegistrationStatus;
import java.util.UUID;
import com.eventplatform.registration.analytics.service.model.UpdateRegistrationRequest;
import com.eventplatform.registration.analytics.service.model.ValidationError;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Registrations", description = "Core registration management including creation, updates, and lifecycle management. Supports complex workflows with custom fields and multi-tier ticketing. ")
public interface RegistrationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /registrations/bulk : Bulk registration operations
     * Perform bulk operations on multiple registrations such as status updates, notifications, or check-ins. 
     *
     * @param bulkRegistrationRequest  (required)
     * @return Bulk operation completed (status code 200)
     *         or Multi-status response for partial success (status code 207)
     */
    @Operation(
        operationId = "registrationsBulkPost",
        summary = "Bulk registration operations",
        description = "Perform bulk operations on multiple registrations such as status updates, notifications, or check-ins. ",
        tags = { "Registrations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Bulk operation completed", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BulkOperationResult.class))
            }),
            @ApiResponse(responseCode = "207", description = "Multi-status response for partial success", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BulkOperationResult.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/registrations/bulk",
        produces = "application/json",
        consumes = "application/json"
    )
    
    default ResponseEntity<BulkOperationResult> registrationsBulkPost(
        @Parameter(name = "BulkRegistrationRequest", description = "", required = true) @Valid @RequestBody BulkRegistrationRequest bulkRegistrationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalItems\" : 0, \"operationId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"failedItems\" : 5, \"processedItems\" : 6, \"errors\" : [ { \"itemId\" : \"itemId\", \"details\" : \"details\", \"error\" : \"error\" }, { \"itemId\" : \"itemId\", \"details\" : \"details\", \"error\" : \"error\" } ], \"successfulItems\" : 1, \"status\" : \"COMPLETED\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /registrations : List registrations with advanced filtering
     * Retrieve registrations with complex filtering, sorting, and pagination. Supports querying by multiple criteria and date ranges. 
     *
     * @param page Page number (0-based) (optional, default to 0)
     * @param size Page size (optional, default to 20)
     * @param sort Sort criteria (field,direction) (optional)
     * @param eventId Filter by event ID (optional)
     * @param userId Filter by user ID (optional)
     * @param status Filter by registration status (optional)
     * @param registeredAfter Filter registrations created after this date (optional)
     * @param registeredBefore Filter registrations created before this date (optional)
     * @param paymentStatus Filter by payment status (optional)
     * @param includeCheckIns Include check-in records in response (optional, default to false)
     * @return List of registrations (status code 200)
     */
    @Operation(
        operationId = "registrationsGet",
        summary = "List registrations with advanced filtering",
        description = "Retrieve registrations with complex filtering, sorting, and pagination. Supports querying by multiple criteria and date ranges. ",
        tags = { "Registrations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of registrations", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RegistrationPage.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/registrations",
        produces = "application/json"
    )
    
    default ResponseEntity<RegistrationPage> registrationsGet(
        @Min(0) @Parameter(name = "page", description = "Page number (0-based)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Max(100) @Parameter(name = "size", description = "Page size", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size,
        @Parameter(name = "sort", description = "Sort criteria (field,direction)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) List<@Pattern(regexp = "^[a-zA-Z][a-zA-Z0-9]*,(asc|desc)$")String> sort,
        @Parameter(name = "eventId", description = "Filter by event ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "eventId", required = false) String eventId,
        @Parameter(name = "userId", description = "Filter by user ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userId", required = false) UUID userId,
        @Parameter(name = "status", description = "Filter by registration status", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) List<@Valid RegistrationStatus> status,
        @Parameter(name = "registeredAfter", description = "Filter registrations created after this date", in = ParameterIn.QUERY) @Valid @RequestParam(value = "registeredAfter", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime registeredAfter,
        @Parameter(name = "registeredBefore", description = "Filter registrations created before this date", in = ParameterIn.QUERY) @Valid @RequestParam(value = "registeredBefore", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime registeredBefore,
        @Parameter(name = "paymentStatus", description = "Filter by payment status", in = ParameterIn.QUERY) @Valid @RequestParam(value = "paymentStatus", required = false) PaymentStatus paymentStatus,
        @Parameter(name = "includeCheckIns", description = "Include check-in records in response", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeCheckIns", required = false, defaultValue = "false") Boolean includeCheckIns
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /registrations : Create a new event registration
     * Creates a new registration for a user to an event. Supports complex  registration workflows with custom fields and multi-tier ticketing. 
     *
     * @param createRegistrationRequest  (required)
     * @return Registration created successfully (status code 201)
     *         or Invalid request parameters or body (status code 400)
     *         or Registration conflict (user already registered, tickets sold out) (status code 409)
     *         or Validation failed for request data (status code 422)
     */
    @Operation(
        operationId = "registrationsPost",
        summary = "Create a new event registration",
        description = "Creates a new registration for a user to an event. Supports complex  registration workflows with custom fields and multi-tier ticketing. ",
        tags = { "Registrations" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Registration created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Registration.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters or body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Registration conflict (user already registered, tickets sold out)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ConflictError.class))
            }),
            @ApiResponse(responseCode = "422", description = "Validation failed for request data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/registrations",
        produces = "application/json",
        consumes = "application/json"
    )
    
    default ResponseEntity<Registration> registrationsPost(
        @Parameter(name = "CreateRegistrationRequest", description = "", required = true) @Valid @RequestBody CreateRegistrationRequest createRegistrationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"eventId\" : \"eventId\", \"registeredAt\" : \"2000-01-23T04:56:07.000+00:00\", \"userId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"version\" : 0, \"selectedTicketTierIds\" : [ \"selectedTicketTierIds\", \"selectedTicketTierIds\" ], \"totalAmount\" : 99.99, \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"currency\" : \"USD\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"registrationData\" : { \"key\" : \"\" }, \"checkIns\" : [ { \"checkInTime\" : \"2000-01-23T04:56:07.000+00:00\", \"location\" : \"location\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"additionalData\" : { \"key\" : \"\" }, \"deviceId\" : \"deviceId\" }, { \"checkInTime\" : \"2000-01-23T04:56:07.000+00:00\", \"location\" : \"location\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"additionalData\" : { \"key\" : \"\" }, \"deviceId\" : \"deviceId\" } ], \"paymentInfo\" : { \"amount\" : 99.99, \"paymentId\" : \"paymentId\", \"processedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"paymentMetadata\" : { \"key\" : \"\" }, \"currency\" : \"currency\", \"transactionId\" : \"transactionId\" }, \"notifications\" : [ { \"metadata\" : { \"key\" : \"\" }, \"subject\" : \"subject\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"sentAt\" : \"2000-01-23T04:56:07.000+00:00\", \"type\" : \"EMAIL\", \"content\" : \"content\", \"status\" : \"PENDING\" }, { \"metadata\" : { \"key\" : \"\" }, \"subject\" : \"subject\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"sentAt\" : \"2000-01-23T04:56:07.000+00:00\", \"type\" : \"EMAIL\", \"content\" : \"content\", \"status\" : \"PENDING\" } ], \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /registrations/{registrationId} : Cancel registration
     * Cancel a registration. This may trigger refund processing depending  on the event&#39;s cancellation policy. 
     *
     * @param registrationId  (required)
     * @param reason Cancellation reason (optional)
     * @return Registration cancelled successfully (status code 200)
     *         or Invalid request parameters or body (status code 400)
     *         or Cannot cancel registration (e.g., event already started) (status code 409)
     */
    @Operation(
        operationId = "registrationsRegistrationIdDelete",
        summary = "Cancel registration",
        description = "Cancel a registration. This may trigger refund processing depending  on the event's cancellation policy. ",
        tags = { "Registrations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Registration cancelled successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CancellationResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters or body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Cannot cancel registration (e.g., event already started)")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/registrations/{registrationId}",
        produces = "application/json"
    )
    
    default ResponseEntity<CancellationResult> registrationsRegistrationIdDelete(
        @Parameter(name = "registrationId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("registrationId") UUID registrationId,
        @Size(max = 500) @Parameter(name = "reason", description = "Cancellation reason", in = ParameterIn.QUERY) @Valid @RequestParam(value = "reason", required = false) String reason
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"reason\" : \"reason\", \"refundMethod\" : \"refundMethod\", \"registrationId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"cancellationFee\" : 5.0, \"estimatedRefundDate\" : \"2000-01-23\", \"status\" : \"CANCELLED\", \"refundAmount\" : 99.99 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /registrations/{registrationId} : Get registration details
     *
     * @param registrationId  (required)
     * @param includeAnalytics Include analytics data for this registration (optional, default to false)
     * @return Registration details (status code 200)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "registrationsRegistrationIdGet",
        summary = "Get registration details",
        tags = { "Registrations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Registration details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RegistrationDetails.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/registrations/{registrationId}",
        produces = "application/json"
    )
    
    default ResponseEntity<RegistrationDetails> registrationsRegistrationIdGet(
        @Parameter(name = "registrationId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("registrationId") UUID registrationId,
        @Parameter(name = "includeAnalytics", description = "Include analytics data for this registration", in = ParameterIn.QUERY) @Valid @RequestParam(value = "includeAnalytics", required = false, defaultValue = "false") Boolean includeAnalytics
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /registrations/{registrationId} : Update registration
     * Update registration details. Supports partial updates and status transitions. Some fields may be immutable after certain status changes. 
     *
     * @param registrationId  (required)
     * @param updateRegistrationRequest  (required)
     * @return Registration updated successfully (status code 200)
     *         or Invalid request parameters or body (status code 400)
     *         or Invalid status transition or concurrent modification (status code 409)
     */
    @Operation(
        operationId = "registrationsRegistrationIdPatch",
        summary = "Update registration",
        description = "Update registration details. Supports partial updates and status transitions. Some fields may be immutable after certain status changes. ",
        tags = { "Registrations" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Registration updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Registration.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters or body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "409", description = "Invalid status transition or concurrent modification", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ConflictError.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/registrations/{registrationId}",
        produces = "application/json",
        consumes = "application/json"
    )
    
    default ResponseEntity<Registration> registrationsRegistrationIdPatch(
        @Parameter(name = "registrationId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("registrationId") UUID registrationId,
        @Parameter(name = "UpdateRegistrationRequest", description = "", required = true) @Valid @RequestBody UpdateRegistrationRequest updateRegistrationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"eventId\" : \"eventId\", \"registeredAt\" : \"2000-01-23T04:56:07.000+00:00\", \"userId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"version\" : 0, \"selectedTicketTierIds\" : [ \"selectedTicketTierIds\", \"selectedTicketTierIds\" ], \"totalAmount\" : 99.99, \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"currency\" : \"USD\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"registrationData\" : { \"key\" : \"\" }, \"checkIns\" : [ { \"checkInTime\" : \"2000-01-23T04:56:07.000+00:00\", \"location\" : \"location\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"additionalData\" : { \"key\" : \"\" }, \"deviceId\" : \"deviceId\" }, { \"checkInTime\" : \"2000-01-23T04:56:07.000+00:00\", \"location\" : \"location\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"additionalData\" : { \"key\" : \"\" }, \"deviceId\" : \"deviceId\" } ], \"paymentInfo\" : { \"amount\" : 99.99, \"paymentId\" : \"paymentId\", \"processedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"paymentMetadata\" : { \"key\" : \"\" }, \"currency\" : \"currency\", \"transactionId\" : \"transactionId\" }, \"notifications\" : [ { \"metadata\" : { \"key\" : \"\" }, \"subject\" : \"subject\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"sentAt\" : \"2000-01-23T04:56:07.000+00:00\", \"type\" : \"EMAIL\", \"content\" : \"content\", \"status\" : \"PENDING\" }, { \"metadata\" : { \"key\" : \"\" }, \"subject\" : \"subject\", \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"sentAt\" : \"2000-01-23T04:56:07.000+00:00\", \"type\" : \"EMAIL\", \"content\" : \"content\", \"status\" : \"PENDING\" } ], \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
