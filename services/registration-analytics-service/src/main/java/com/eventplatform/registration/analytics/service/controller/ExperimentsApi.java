/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.eventplatform.registration.analytics.service.controller;

import com.eventplatform.registration.analytics.service.model.ConversionRequest;
import com.eventplatform.registration.analytics.service.model.CreateExperimentRequest;
import com.eventplatform.registration.analytics.service.model.Experiment;
import com.eventplatform.registration.analytics.service.model.ExperimentParticipationRequest;
import com.eventplatform.registration.analytics.service.model.ExperimentParticipationResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Experiments", description = "A/B testing framework for optimizing conversion rates and user experience with statistical significance testing. ")
public interface ExperimentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /experiments/{experimentId}/convert : Record experiment conversion
     *
     * @param experimentId  (required)
     * @param conversionRequest  (required)
     * @return Conversion recorded successfully (status code 200)
     */
    @Operation(
        operationId = "experimentsExperimentIdConvertPost",
        summary = "Record experiment conversion",
        tags = { "Experiments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Conversion recorded successfully")
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/experiments/{experimentId}/convert",
        consumes = "application/json"
    )
    
    default ResponseEntity<Void> experimentsExperimentIdConvertPost(
        @Parameter(name = "experimentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("experimentId") String experimentId,
        @Parameter(name = "ConversionRequest", description = "", required = true) @Valid @RequestBody ConversionRequest conversionRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /experiments/{experimentId}/participate : Record experiment participation
     *
     * @param experimentId  (required)
     * @param experimentParticipationRequest  (required)
     * @return Participation recorded, variant assigned (status code 200)
     */
    @Operation(
        operationId = "experimentsExperimentIdParticipatePost",
        summary = "Record experiment participation",
        tags = { "Experiments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Participation recorded, variant assigned", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ExperimentParticipationResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/experiments/{experimentId}/participate",
        produces = "application/json",
        consumes = "application/json"
    )
    
    default ResponseEntity<ExperimentParticipationResponse> experimentsExperimentIdParticipatePost(
        @Parameter(name = "experimentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("experimentId") String experimentId,
        @Parameter(name = "ExperimentParticipationRequest", description = "", required = true) @Valid @RequestBody ExperimentParticipationRequest experimentParticipationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"configuration\" : { \"key\" : \"\" }, \"variant\" : \"variant\", \"participationId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /experiments : List active experiments
     *
     * @param eventId  (optional)
     * @param active  (optional, default to true)
     * @return List of experiments (status code 200)
     */
    @Operation(
        operationId = "experimentsGet",
        summary = "List active experiments",
        tags = { "Experiments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of experiments", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Experiment.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/experiments",
        produces = "application/json"
    )
    
    default ResponseEntity<List<Experiment>> experimentsGet(
        @Parameter(name = "eventId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "eventId", required = false) String eventId,
        @Parameter(name = "active", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false, defaultValue = "true") Boolean active
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"targetingRules\" : { \"key\" : \"\" }, \"eventId\" : \"eventId\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"trafficAllocation\" : 0.8, \"description\" : \"description\", \"id\" : \"id\", \"variants\" : [ { \"configuration\" : { \"key\" : \"\" }, \"name\" : \"name\", \"weight\" : 0.5, \"id\" : \"id\" }, { \"configuration\" : { \"key\" : \"\" }, \"name\" : \"name\", \"weight\" : 0.5, \"id\" : \"id\" } ], \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"DRAFT\" }, { \"targetingRules\" : { \"key\" : \"\" }, \"eventId\" : \"eventId\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"trafficAllocation\" : 0.8, \"description\" : \"description\", \"id\" : \"id\", \"variants\" : [ { \"configuration\" : { \"key\" : \"\" }, \"name\" : \"name\", \"weight\" : 0.5, \"id\" : \"id\" }, { \"configuration\" : { \"key\" : \"\" }, \"name\" : \"name\", \"weight\" : 0.5, \"id\" : \"id\" } ], \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"DRAFT\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /experiments : Create new experiment
     *
     * @param createExperimentRequest  (required)
     * @return Experiment created successfully (status code 201)
     */
    @Operation(
        operationId = "experimentsPost",
        summary = "Create new experiment",
        tags = { "Experiments" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Experiment created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Experiment.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/experiments",
        produces = "application/json",
        consumes = "application/json"
    )
    
    default ResponseEntity<Experiment> experimentsPost(
        @Parameter(name = "CreateExperimentRequest", description = "", required = true) @Valid @RequestBody CreateExperimentRequest createExperimentRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"targetingRules\" : { \"key\" : \"\" }, \"eventId\" : \"eventId\", \"endDate\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"trafficAllocation\" : 0.8, \"description\" : \"description\", \"id\" : \"id\", \"variants\" : [ { \"configuration\" : { \"key\" : \"\" }, \"name\" : \"name\", \"weight\" : 0.5, \"id\" : \"id\" }, { \"configuration\" : { \"key\" : \"\" }, \"name\" : \"name\", \"weight\" : 0.5, \"id\" : \"id\" } ], \"startDate\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"DRAFT\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
