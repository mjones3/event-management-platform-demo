/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.eventplatform.registration.analytics.service.controller;

import org.springframework.format.annotation.DateTimeFormat;
import com.eventplatform.registration.analytics.service.model.ErrorResponse;
import java.time.OffsetDateTime;
import com.eventplatform.registration.analytics.service.model.PaymentPage;
import com.eventplatform.registration.analytics.service.model.PaymentStatus;
import com.eventplatform.registration.analytics.service.model.RefundRequest;
import com.eventplatform.registration.analytics.service.model.RefundResult;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Payments", description = "Payment processing, refunds, and financial transaction management with  support for multiple payment methods. ")
public interface PaymentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /payments : List payments with filtering
     *
     * @param page Page number (0-based) (optional, default to 0)
     * @param size Page size (optional, default to 20)
     * @param eventId  (optional)
     * @param status  (optional)
     * @param dateFrom  (optional)
     * @param dateTo  (optional)
     * @return List of payments (status code 200)
     */
    @Operation(
        operationId = "paymentsGet",
        summary = "List payments with filtering",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of payments", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaymentPage.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/payments",
        produces = "application/json"
    )
    
    default ResponseEntity<PaymentPage> paymentsGet(
        @Min(0) @Parameter(name = "page", description = "Page number (0-based)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Max(100) @Parameter(name = "size", description = "Page size", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size,
        @Parameter(name = "eventId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "eventId", required = false) String eventId,
        @Parameter(name = "status", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "status", required = false) PaymentStatus status,
        @Parameter(name = "dateFrom", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dateFrom", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateFrom,
        @Parameter(name = "dateTo", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "dateTo", required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime dateTo
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /payments/{paymentId}/refund : Process refund
     * Process a refund for a payment. May be partial or full refund. 
     *
     * @param paymentId  (required)
     * @param refundRequest  (required)
     * @return Refund processed successfully (status code 200)
     *         or Invalid request parameters or body (status code 400)
     */
    @Operation(
        operationId = "paymentsPaymentIdRefundPost",
        summary = "Process refund",
        description = "Process a refund for a payment. May be partial or full refund. ",
        tags = { "Payments" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Refund processed successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RefundResult.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters or body", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "ApiKeyAuth"),
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments/{paymentId}/refund",
        produces = "application/json",
        consumes = "application/json"
    )
    
    default ResponseEntity<RefundResult> paymentsPaymentIdRefundPost(
        @Parameter(name = "paymentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("paymentId") String paymentId,
        @Parameter(name = "RefundRequest", description = "", required = true) @Valid @RequestBody RefundRequest refundRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"amount\" : 50.0, \"processedAt\" : \"2000-01-23T04:56:07.000+00:00\", \"estimatedArrival\" : \"2000-01-23T04:56:07.000+00:00\", \"refundId\" : \"refundId\", \"status\" : \"PENDING\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
