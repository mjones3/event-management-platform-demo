/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.eventplatform.event.management.service.controller;

import com.eventplatform.event.management.service.model.CreateEventManagementServiceRequest;
import com.eventplatform.event.management.service.model.ErrorResponse;
import com.eventplatform.event.management.service.model.EventManagementServiceResponse;
import com.eventplatform.event.management.service.model.PagedEventManagementServiceResponse;
import java.util.UUID;
import com.eventplatform.event.management.service.model.UpdateEventManagementServiceRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "EventManagementService", description = "Item management operations")
public interface EventManagementServiceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /event-management-service_PLURAL : List event-management-service_PLURAL with pagination
     * Retrieve a paginated list with optional filtering
     *
     * @param page Page number (0-based) (optional, default to 0)
     * @param size Page size (optional, default to 20)
     * @param search Search term (optional)
     * @return Successfully retrieved items (status code 200)
     *         or Bad request - validation errors (status code 400)
     *         or Authentication required (status code 401)
     */
    @Operation(
        operationId = "eventManagementServicePLURALGet",
        summary = "List event-management-service_PLURAL with pagination",
        description = "Retrieve a paginated list with optional filtering",
        tags = { "EventManagementService" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved items", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PagedEventManagementServiceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - validation errors", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication required", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/event-management-service_PLURAL",
        produces = "application/json"
    )
    
    default ResponseEntity<PagedEventManagementServiceResponse> eventManagementServicePLURALGet(
        @Min(0) @Parameter(name = "page", description = "Page number (0-based)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page,
        @Min(1) @Max(100) @Parameter(name = "size", description = "Page size", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "20") Integer size,
        @Size(min = 2) @Parameter(name = "search", description = "Search term", in = ParameterIn.QUERY) @Valid @RequestParam(value = "search", required = false) String search
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : 0, \"size\" : 20, \"last\" : false, \"totalPages\" : 8, \"content\" : [ { \"createdAt\" : \"2024-01-15T10:30:00Z\", \"name\" : \"Sample Item\", \"description\" : \"A sample item description\", \"id\" : \"550e8400-e29b-41d4-a716-446655440000\", \"status\" : \"ACTIVE\", \"updatedAt\" : \"2024-01-20T14:22:00Z\" }, { \"createdAt\" : \"2024-01-15T10:30:00Z\", \"name\" : \"Sample Item\", \"description\" : \"A sample item description\", \"id\" : \"550e8400-e29b-41d4-a716-446655440000\", \"status\" : \"ACTIVE\", \"updatedAt\" : \"2024-01-20T14:22:00Z\" } ], \"first\" : true, \"totalElements\" : 150 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /event-management-service_PLURAL/{id} : Delete item
     * Delete an item
     *
     * @param id  (required)
     * @return Item deleted successfully (status code 204)
     *         or Resource not found (status code 404)
     *         or Authentication required (status code 401)
     */
    @Operation(
        operationId = "eventManagementServicePLURALIdDelete",
        summary = "Delete item",
        description = "Delete an item",
        tags = { "EventManagementService" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Item deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication required", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/event-management-service_PLURAL/{id}",
        produces = "application/json"
    )
    
    default ResponseEntity<Void> eventManagementServicePLURALIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /event-management-service_PLURAL/{id} : Get item by ID
     * Retrieve detailed information about a specific item
     *
     * @param id Item ID (required)
     * @return Item found (status code 200)
     *         or Resource not found (status code 404)
     *         or Authentication required (status code 401)
     */
    @Operation(
        operationId = "eventManagementServicePLURALIdGet",
        summary = "Get item by ID",
        description = "Retrieve detailed information about a specific item",
        tags = { "EventManagementService" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Item found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EventManagementServiceResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication required", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/event-management-service_PLURAL/{id}",
        produces = "application/json"
    )
    
    default ResponseEntity<EventManagementServiceResponse> eventManagementServicePLURALIdGet(
        @Parameter(name = "id", description = "Item ID", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2024-01-15T10:30:00Z\", \"name\" : \"Sample Item\", \"description\" : \"A sample item description\", \"id\" : \"550e8400-e29b-41d4-a716-446655440000\", \"status\" : \"ACTIVE\", \"updatedAt\" : \"2024-01-20T14:22:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /event-management-service_PLURAL/{id} : Update item
     * Update item information (full update)
     *
     * @param id  (required)
     * @param updateEventManagementServiceRequest  (required)
     * @return Item updated successfully (status code 200)
     *         or Bad request - validation errors (status code 400)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "eventManagementServicePLURALIdPut",
        summary = "Update item",
        description = "Update item information (full update)",
        tags = { "EventManagementService" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Item updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EventManagementServiceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - validation errors", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/event-management-service_PLURAL/{id}",
        produces = "application/json",
        consumes = "application/json"
    )
    
    default ResponseEntity<EventManagementServiceResponse> eventManagementServicePLURALIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "UpdateEventManagementServiceRequest", description = "", required = true) @Valid @RequestBody UpdateEventManagementServiceRequest updateEventManagementServiceRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2024-01-15T10:30:00Z\", \"name\" : \"Sample Item\", \"description\" : \"A sample item description\", \"id\" : \"550e8400-e29b-41d4-a716-446655440000\", \"status\" : \"ACTIVE\", \"updatedAt\" : \"2024-01-20T14:22:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /event-management-service_PLURAL : Create a new item
     * Create a new item in the system
     *
     * @param createEventManagementServiceRequest  (required)
     * @return Item created successfully (status code 201)
     *         or Bad request - validation errors (status code 400)
     *         or Authentication required (status code 401)
     */
    @Operation(
        operationId = "eventManagementServicePLURALPost",
        summary = "Create a new item",
        description = "Create a new item in the system",
        tags = { "EventManagementService" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Item created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EventManagementServiceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request - validation errors", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication required", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/event-management-service_PLURAL",
        produces = "application/json",
        consumes = "application/json"
    )
    
    default ResponseEntity<EventManagementServiceResponse> eventManagementServicePLURALPost(
        @Parameter(name = "CreateEventManagementServiceRequest", description = "", required = true) @Valid @RequestBody CreateEventManagementServiceRequest createEventManagementServiceRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2024-01-15T10:30:00Z\", \"name\" : \"Sample Item\", \"description\" : \"A sample item description\", \"id\" : \"550e8400-e29b-41d4-a716-446655440000\", \"status\" : \"ACTIVE\", \"updatedAt\" : \"2024-01-20T14:22:00Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
