openapi: 3.0.3
info:
  title: UserManagementService Service API
  description: User management and authentication service
  version: 1.0.0
  contact:
    name: API Support
    email: support@eventplatform.com
servers:
  - url: https://api.eventplatform.com/user-management-service/v1
    description: Production server
  - url: http://localhost:8080/api/v1
    description: Development server

security:
  - BearerAuth: []

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the service
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
  
  /user-management-service_PLURAL:
    get:
      summary: List user-management-service_PLURAL with pagination
      description: Retrieve a paginated list with optional filtering
      tags:
        - UserManagementService
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: search
          in: query
          description: Search term
          schema:
            type: string
            minLength: 2
      responses:
        '200':
          description: Successfully retrieved items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedUserManagementServiceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Create a new item
      description: Create a new item in the system
      tags:
        - UserManagementService
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserManagementServiceRequest'
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserManagementServiceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /user-management-service_PLURAL/{id}:
    get:
      summary: Get item by ID
      description: Retrieve detailed information about a specific item
      tags:
        - UserManagementService
      parameters:
        - name: id
          in: path
          required: true
          description: Item ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserManagementServiceResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      summary: Update item
      description: Update item information (full update)
      tags:
        - UserManagementService
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserManagementServiceRequest'
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserManagementServiceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete item
      description: Delete an item
      tags:
        - UserManagementService
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Item deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "UP"
        service:
          type: string
          example: "user-management-service"
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          example: "1.0.0"
      required:
        - status
        - service
        - timestamp
    
    UserManagementServiceResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          example: "Sample Item"
        description:
          type: string
          example: "A sample item description"
        status:
          type: string
          enum: [ACTIVE, INACTIVE, PENDING]
          example: "ACTIVE"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-20T14:22:00Z"
      required:
        - id
        - name
        - status
        - createdAt
    
    CreateUserManagementServiceRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          example: "New Item"
        description:
          type: string
          maxLength: 500
          example: "Description of the new item"
      required:
        - name
    
    UpdateUserManagementServiceRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        status:
          type: string
          enum: [ACTIVE, INACTIVE, PENDING]
    
    PagedUserManagementServiceResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserManagementServiceResponse'
        totalElements:
          type: integer
          format: int64
          example: 150
        totalPages:
          type: integer
          example: 8
        size:
          type: integer
          example: 20
        number:
          type: integer
          example: 0
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: false
      required:
        - content
        - totalElements
        - totalPages
        - size
        - number
        - first
        - last
    
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2024-01-20T15:30:45Z"
        status:
          type: integer
          example: 400
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Validation failed"
        path:
          type: string
          example: "/api/v1/items"
      required:
        - timestamp
        - status
        - error
        - message
        - path
  
  responses:
    BadRequest:
      description: Bad request - validation errors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: UserManagementService
    description: Item management operations
  - name: Health
    description: Service health endpoints
